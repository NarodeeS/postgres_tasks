namespace: postgres-tasks

django:
  image:
    repository: narodees/postgres_tasks-django
    tag: latest
    pullPolicy: Always
  resources:
    limits:
      memory: "1Gi"
      cpu: "500m"
  env:
    DJANGO_SECRET_KEY: some_very_secret_key
    POSTGRES_USER: adminka
    POSTGRES_PASSWORD: qwerty
    SANDBOX_POSTGRES_DB: postgres
    SANDBOX_POSTGRES_HOST: sandbox-postgres
    SANDBOX_POSTGRES_PORT: 5432
    RABBITMQ_DEFAULT_USER: rabbit
    RABBITMQ_DEFAULT_PASS: cool_rabbit
    POSTGRES_DB: sandbox
    VERIFICATE_EMAIL: 0
    EMAIL_HOST_USER: change_me
    EMAIL_HOST_PASSWORD: change_me
    MINIO_STORAGE_ACCESS_KEY: uQsrfmNzAfmYJNOJaWeQ
    MINIO_STORAGE_SECRET_KEY: G9Q6RxdEHRIYx7y3e2kOee4TVhGOhK9i1gY137sm

django-postgres:
  image:
    repository: postgres
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "128Mi"
      cpu: "500m"
  data:
    resources:
      requests:
        storage: "500Mi"
  env:
    POSTGRES_USER: adminka
    POSTGRES_PASSWORD: qwerty

sandbox-postgres:
  image:
    repository: postgres
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "1Gi"
      cpu: "250m"
  data:
    resources:
      requests:
        storage: "500Mi"
  env:
    POSTGRES_USER: adminka
    POSTGRES_PASSWORD: qwerty
    POSTGRES_DB: sandbox

nginx:
  image:
    repository: narodees/postgres_tasks-nginx
    tag: latest
    pullPolicy: Always
  resources:
    limits:
      memory: "250Mi"
      cpu: "250m"
  config: |
    upstream postgres-api {
      server django:8000;
    }

    server {
        listen 80;
        server_name nginx.localhost;

        location /api {
            proxy_pass http://postgres-api/api;
        }

        location /admin {
            proxy_pass http://postgres-api/admin;
        }

        location /metrics {
            access_log off;
            error_log off;
            stub_status;
        }

        location /static {
            access_log off;
            error_log off;
            alias /www/data/static;
        }

        location / {
            root /usr/share/nginx/html;
            index index.html;
            include  /etc/nginx/mime.types;
            try_files $uri $uri/ /index.html;
        }
    }

nginx-exporter:
  image:
    repository: nginx/nginx-prometheus-exporter
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "128Mi"
      cpu: "250m"

rabbitmq:
  image:
    repository: rabbitmq
    tag: 3-management
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "250Mi"
      cpu: "250m"
  env:
    RABBITMQ_DEFAULT_USER: rabbit
    RABBITMQ_DEFAULT_PASS: cool_rabbit

node-exporter:
  image:
    repository: prom/node-exporter
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 200Mi

prometheus:
  image:
    repository: prom/prometheus
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "128Mi"
      cpu: "250m"
  config: |
    global:
      scrape_interval: 30s

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'django'
        static_configs:
          - targets: ['django:8000']

      - job_name: 'nginx'
        static_configs:
          - targets: ['nginx-exporter:9113']
      
      - job_name: 'rabbit'
        static_configs:
          - targets: ['rabbitmq:15692']
  
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints 
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: 'node-exporter'
            action: keep

loki:
  image:
    repository: grafana/loki
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "128Mi"
      cpu: "128m"
  config: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      instance_addr: 127.0.0.1
      path_prefix: /tmp/loki
      storage:
        filesystem:
          chunks_directory: /tmp/loki/chunks
          rules_directory: /tmp/loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory

    query_range:
      results_cache:
        cache:
          embedded_cache:
            enabled: true
            max_size_mb: 100

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

grafana:
  image:
    repository: narodees/postgres_tasks-grafana
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "256Mi"
      cpu: "300m"
  env:
    GF_SECURITY_ADMIN_USER: admin
    GF_SECURITY_ADMIN_PASSWORD: admin

promtail:
  image:
    repository: grafana/promtail
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: "128Mi"
      cpu: "128m"
  config: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
    - job_name: django-log-scraper
      static_configs:
        - targets:
            - localhost
          labels:
            __path__: "/var/log/celery.log"
            app: celery
        - targets:
            - localhost
          labels:
            __path__: "/var/log/celery_beats.log"
            app: celery-beats
        - targets:
            - localhost
          labels:
            __path__: "/var/log/django.log"
            app: django
        - targets:
            - localhost
          labels:
            __path__: "/var/log/access.log"
            app: nginx-access
        - targets:
            - localhost
          labels:
            __path__: "/var/log/error.log"
            app: nginx-error 

ingress:
  class: traefik
  tls:
    hosts:
      - nginx.localhost  # change to public domain
      - grafana.localhost  # change to public domain
  rules:
    - host: nginx.localhost
      path: "/"
      service:
        name: nginx
        port: 80

    - host: grafana.localhost
      path: "/"
      service:
        name: grafana
        port: 3000